function remap() {
        hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000064,"HIDKeyboardModifierMappingDst":0x700000035},{"HIDKeyboardModifierMappingSrc":0x700000035,"HIDKeyboardModifierMappingDst":0x700000064}]}'
}

function showmap() {
        hidutil property --get "UserKeyMapping"
}

function unmap() {
        hidutil property --set '{"UserKeyMapping":[]}'
}

function gdl() {
	ID=""
	INPUT=$(pbpaste)
	APIKEY=$(cat ~/.google-api-key)
	if [ ! -z "$*" ]
	then
		ID="n=$(echo $* | tr "a-z " "A-Z_")&"
	fi
	TRAILING=${INPUT#https://drive.google.com/file/d/}
	FILEID=${TRAILING%/*}
	if [[ $FILEID =~ ^[A-Za-z0-9_-][A-Za-z0-9_-]*$ ]]
	then
		URL="https://www.googleapis.com/drive/v3/files/$FILEID?${ID}alt=media&key=$APIKEY"
		echo $URL | pbcopy
		echo "URL copied to clipboard"
	else
		echo "Failed to extract FileID (got: $FILEID)"
	fi
}

function x() {
	echo $(pbpaste | tr -d '\n\\') | pbcopy 
	echo Your clipboard contains:
	echo
	pbpaste
}

function gco() {
	local FIRST=0
	while [[ $1 =~ ^- ]]
	do
		case $1 in
			--first)
				FIRST=1
				;;
			-f)
				FIRST=1
				;;
			*)
				echo Unrecognized option $1
				exit 1
		esac
		shift
	done

	MATCHES=$(git branch --remote | grep -w "$*" | awk 'END {print NR}')
	case ${MATCHES} in
	0)
		echo No branch matched for "\"$*\"", available branches are:
		git branch --remote
		false
		;;
	1)
		git checkout $(git branch --remote | grep -w "$*" | sed 's/^\s*origin\///')
		;;
	*)
		echo Multiple branches matched for "\"$*\"":
		git branch --remote | grep -w "$*"
		if [[ ${FIRST} == 1 ]]
		then
			echo "Checking out the first hit"
			git checkout $(git branch --remote | grep -w "$*" | head -1 | sed 's/^\s*origin\///')
		else
			echo "Re-run with --first (-f) if you wish to check out the first hit"
			false
		fi
		;;
	esac
}

function c() {
	if [ -z "$*" ]
	then
		code .
	else
		z "$*" && code .
	fi
}

function l() {
	LOCAL=.local${1:+-$1}
	if [ -f $LOCAL -a -x $LOCAL ]
	then
		echo Running $LOCAL
		cat $LOCAL
		./$LOCAL
	else
		echo Requested script $LOCAL does not exist or is not executable
	fi
}

function update_all() {
	find ~/ws -type d -name .git
}

function rr() {

	while [ $(git status -s | grep '^UU' | wc -l) = 1 ] && [ $(git status -s | grep '^UU' | grep 'pnpm-lock.yaml' | wc -l) = 1 ]
	do
		echo Running rlock...
		pnpm install && git add pnpm-lock.yaml && GIT_EDITOR=true git rebase --continue
	done
	git status -s
}

function v() {
	if [ ! -r dotenv-sample ]
	then
		echo "No dotenv-sample found in current directory - exiting"
		return
	fi
	echo "Setting python virtual env..." &&
	python -m venv env &&
	echo "Activating it..." &&
	source ./env/bin/activate &&
	echo "Installing requirements..." &&
	pip install -r requirements.txt &&
	if [ ! -r .env ]
	then
		echo "Copying dotenv-sample to .env"
		cp dotenv-sample .env
	fi
}

function token() {
	TOKEN=$(pbpaste)
	if [ ! -r .env ]
	then
		echo No .env file found here
		return
	fi

	if [ ${TOKEN:0:2} != 'ey' ]
	then
		echo No access token found in clipboard
		return
	fi

	echo ACCESS_TOKEN=${TOKEN} > .env
	echo Token updated in .env
}

function xnpm() {
	if [[ install = ${1:-x}* ]]
	then
		echo "You tried to run 'npm install' but most likely you intented to run 'pnpm install'."
		echo "Please run 'pnpm i' instead."
		return 1
	fi	
	$(tr ':' '\n' <<< ${PATH} | grep -F '/.nvm/')/npm $*
}

function a() {
	for target in build lint test typecheck
	do
		if [[ ${target} = ${1:-}* ]]
		then
			echo npm run nx -- affected --base=last-release --target=${target}
			npm run nx -- affected --base=last-release --target=${target}
			return
		fi	
	done

	echo npm run nx -- affected --base=last-release --target=$1
	npm run nx -- affected --base=last-release --target=$1
}

function pgnfilter() {
	if (($# != 2))
	then
		echo Usage: pgnfilter SEARCHSTRING PGNFILE
		return 1
	fi
	awk -v query=$1 -f ~/bin/pgnfilter.awk $2
}
